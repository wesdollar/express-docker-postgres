# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# ----
orbs:
  prog-sonar: progfin-ondemand/sonarqube@1
  k8s-orb: progfin-ondemand/k8s-build-deploy@3.1
  checkmarx: progfin-ondemand/checkmarx@1
  snyk: progfin-ondemand/snyk@1
  pipeline-policy: progfin-ondemand/unified-pipeline-policy@1

common_defaults: &common_defaults
  context: aws-sharedservices-limited
  service-name: product-lookup-v2
  gitops-repo: "git@bitbucket.org:progfin-ondemand/aws-cluster-config.git"
  utilities-repo: "git@bitbucket.org:progfin-ondemand/platform.circleci.utils.git"

aws_erc_account_url: &aws_ecr_account_url
  aws-ecr-account-url: "107887637814.dkr.ecr.us-west-2.amazonaws.com"

prepare_deployment_defaults: &prepare_deployment_defaults
  tag: "${CIRCLE_SHA1}"

  helm-use-s3: true
  helm-s3-repo: prog-leasing-helm-charts
  helm-s3-chart: platform-helm
  helm-s3-chart-version: "1.3"

  # helm-use-artifactory: true
  # helm-url: https://art.api.progleasing.com/artifactory/helm-virtual
  # helm-repo: prog-leasing-helm-charts
  # helm-chart: platform-helm
  # helm-chart-version: "1.1.9"

  aws-parameter-prefix: proganywhere
  parameter-yaml: values.circleci.yaml
  helm-directory: helm
  <<: [*common_defaults, *aws_ecr_account_url]

repo_tag: &repo_tag
  repo: "product-lookup-service"
  tag: "${CIRCLE_SHA1}"

build_image_branches_filter: &build_image_branches_filter
  filters:
    branches:
      only:
        - develop
        - master
        - release/2

dev_branches_filter: &dev_branches_filter
  filters:
    branches:
      only:
        - develop
        - feature/*

qa_branches_filter: &qa_branches_filter
  filters:
    branches:
      only:
        - master

release_branches_filter: &release_branches_filter
  filters:
    branches:
      only:
        - release/2

jobs:
  generate_coverage_report:
    docker:
      - image: node:14
    steps:
      - run:
          name: Set BRANCH_NAME env var
          command: echo export BRANCH_NAME=${CIRCLE_BRANCH} >> "$BASH_ENV"
      - checkout
      - run:
          name: Output Test Coverage
          command: |
            cd /root/project
            yarn add jest-sonar-reporter --dev
            yarn install
            yarn test
      # - store_test_results:
      #     path: /root/project/orc-service/testresults
      - persist_to_workspace:
          root: .
          paths:
            - .

workflows:
  Release-Branch-Pipeline:
    jobs:
      - checkmarx/cx-scan:
          context: [CxFlow, aws-sharedservices-limited]
          <<: [*release_branches_filter]
  snyk-scan:
    jobs:
      - snyk/scan:
          context: aws-sharedservices-limited
          <<: [*build_image_branches_filter]
          fail-on-issues: false
          use-slack: false
          project-folder: .

  scan-source:
    jobs:
      - generate_coverage_report:
          context: aws-sharedservices-limited
      - prog-sonar/sonar-scanner:
          context: aws-sharedservices-limited
          isangular: true
          source_directory: "/root/project/src"
          exclusions: "**/src/tests/**,**/src/compliance/categories-blacklist.ts,**/src/compliance/words-blacklist.ts,src/*.ts,**/constants/**,src/exceptions/HttpException.ts"
          pipeline_number: << pipeline.number >>
          coverage_report_path: "/root/project/coverage/lcov.info"
          test_report_path: "/root/project/testresults/test-report.xml"
          test_inclusions: "**/src/**/*test.ts"
          test_folder: "/root/project/src"
          requires:
            - generate_coverage_report

  build-push-image-deploy-and-test:
    jobs:
      - pipeline-policy/populate-standard-fields:
          name: pipeline-policy-standard-fields
          build-number: << pipeline.number >>
          context:
            - aws-sharedservices-limited
      - k8s-orb/build-push-image:
          context: aws-sharedservices-limited
          build-version-json-file: "package.json"
          build-version-jq-key: ".version"
          <<: [*repo_tag, *aws_ecr_account_url, *build_image_branches_filter]
          caching: true

      # # ------- Dev Lane -----------
      - k8s-orb/prepare-deployment-branch:
          name: prepare-deployment-dev
          <<: [*prepare_deployment_defaults, *dev_branches_filter]
          namespace: dev-proganywhere
          deployment-lane: dev
          values-yaml: values.dev.yaml
          requires:
            - k8s-orb/build-push-image

      - k8s-orb/call-merge-deployment-branch:
          name: merge-deployment-dev
          <<: [*common_defaults, *dev_branches_filter, *repo_tag]
          verify-deployment: true
          namespace: dev-proganywhere
          deployment-lane: dev
          requires:
            - prepare-deployment-dev
            - k8s-orb/build-push-image

      # # ------- QA Lane -----------

      - k8s-orb/prepare-deployment-branch:
          name: prepare-deployment-qa
          <<: [*prepare_deployment_defaults, *qa_branches_filter]
          namespace: qa-proganywhere
          deployment-lane: qa
          values-yaml: values.qa.yaml
          requires:
            - k8s-orb/build-push-image

      - k8s-orb/call-merge-deployment-branch:
          name: merge-deployment-qa
          <<: [*common_defaults, *qa_branches_filter, *repo_tag]
          verify-deployment: true
          namespace: qa-proganywhere
          deployment-lane: qa
          requires:
            - prepare-deployment-qa

      # # ------- STG Lane -----------
      - approve_stg:
          type: approval
          <<: *release_branches_filter
          requires:
            - k8s-orb/build-push-image
            # - merge-deployment-qa

      - k8s-orb/prepare-deployment-branch:
          name: prepare-deployment-stg
          <<: [*prepare_deployment_defaults, *release_branches_filter]
          namespace: stg-proganywhere
          deployment-lane: stg
          values-yaml: values.stg.yaml
          requires:
            # - merge-deployment-qa
            - approve_stg

      - k8s-orb/call-merge-deployment-branch:
          name: merge-deployment-stg
          <<: [*common_defaults, *release_branches_filter, *repo_tag]
          verify-deployment: true
          namespace: stg-proganywhere
          deployment-lane: stg
          requires:
            - prepare-deployment-stg
            - approve_stg

      # ------- PROD Lane -----------
      - approve_prod:
          type: approval
          <<: *release_branches_filter
          requires:
            - k8s-orb/build-push-image
            # - merge-deployment-stg

      - k8s-orb/prepare-deployment-branch:
          name: prepare-deployment-prod
          <<: [*prepare_deployment_defaults, *release_branches_filter]
          namespace: prod-proganywhere
          deployment-lane: prod
          values-yaml: values.prod.yaml
          requires:
            # - merge-deployment-stg
            - approve_prod

      - k8s-orb/call-merge-deployment-branch:
          name: merge-deployment-prod
          <<: [*common_defaults, *release_branches_filter, *repo_tag]
          verify-deployment: true
          namespace: prod-proganywhere
          deployment-lane: prod
          requires:
            - prepare-deployment-prod
            - approve_prod
